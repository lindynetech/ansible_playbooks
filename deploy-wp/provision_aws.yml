---
- name: Provision EC2 ECS Optimized instance
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    vars/main.yml

  tasks:
    - name: Find latest ECS AMIs
      ec2_ami_info:
        profile: "{{ profile }}"
        region: "{{ ec2_info.region }}"
        owners: "{{ ec2_info.ecs.owners }}"
        filters: 
          name:  "{{ ec2_info.ecs.filter }}"          
          architecture:  "{{ ec2_info.ecs.architecture }}"
      register: ecs_amis

    # aws ec2 describe-vpcs --filters Name=tag:Name,Values=default_vpc --query Vpcs[*].VpcId --output text
    # aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query Vpcs[*].VpcId --output text

    - name: Resolve vpc info
      ec2_vpc_net_info:    
        profile: "{{ profile }}"    
        filters:         
          "isDefault": "true"
      register: vpc_info

    - name: Set vpc_id var
      set_fact:
        vpc_id: "{{ vpc_info.vpcs.0.vpc_id }}"
    
    # aws ec2 describe-subnets --filters Name=vpc-id,Values=vpc-100fe06d

    - name: Resolve subnet id
      ec2_vpc_subnet_info:
        region: "{{ ec2_info.region }}"
        filters:
          "vpc-id": "{{ vpc_id }}"
      register: vpc_subnet_info
    
    - name: Set subnet_id var
      set_fact:
        subnet_id: "{{vpc_subnet_info.subnets.0.id }}"

    - name: Save AMI for node
      set_fact:
        ecs_ami: >
          {{ ecs_amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
    
    # Create Secucity Groups for EC2 and RDS

    - name: Create EC2 SG
      ec2_group:
        profile: "{{ profile }}"
        name: "{{ ec2_sg_name }}"
        description: "{{ ec2_sg_name }}"
        vpc_id: "{{ vpc_id }}"
        region:  "{{ ec2_info.region }}"
        rules:          
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
 
    - name: Create RDS SG
      ec2_group:
        profile: "{{ profile }}"
        name: "{{ rds_sg_name }}"
        description: "{{ rds_sg_name }}"
        vpc_id: "{{ vpc_id }}"
        region:  "{{ ec2_info.region }}"
        rules:          
          - proto: tcp
            from_port: 3306
            to_port: 3306
            group_name: "{{ ec2_sg_name }}"
      when: use_rds            

    # Create and attach instance profile/role

    # Create EC2 instance profile/role
    - name: Create instance profile/role for RDS
      iam_role:
        profile: "{{ profile }}"
        name: "{{ instance_role_name }}"
        assume_role_policy_document: "{{ lookup('file', 'policy.json') }}"
        managed_policy:
          - arn:aws:iam::aws:policy/AmazonRDSFullAccess

    # Create RDS Instance

    - name: Create RDS instance
      rds_instance:
        db_instance_identifier: "{{ rds_instance_identifier }}"
        engine: mysql
        instance_type: db.t2.micro
        region:  "{{ ec2_info.region }}"
        allocated_storage: 20
        storage_type: gp2
        master_username: "{{ rds_master_username }}"
        master_user_password: "{{ rds_master_password }}"
        backup_retention_period: 3
        publicly_accessible: false
        vpc_security_group_ids: 
          - sg-058f06d28b9371eea
      async: 900
      poll: 0
      when: use_rds

    - name: Create EC2 Instance
      ec2_instance:
        state: running
        name: "{{ ec2_info.instance_name }}"
        vpc_subnet_id: "{{ subnet_id }}"
        image_id: "{{ ecs_ami.image_id }}"
        key_name: "{{ ec2_info.keypair }}"
        security_group: "{{ ec2_sg_name }}"
        instance_type: "{{ ec2_info.ecs.instance_type }}"
        region: "{{ ec2_info.region }}"
        network:
          assign_public_ip: true
        instance_role: "{{ instance_role_name }}"
      register: node_output

    - name: Add node to inventory
      lineinfile:
        path: inventory/hosts
        insertafter: "[wp]"
        regexp: "{{ node_output.instances.0.public_ip_address }}" 
        line: "{{ node_output.instances.0.public_ip_address }} ansible_user={{ ec2_info.ecs.username }} ansible_ssh_private_key_file=~/.ssh/{{ ec2_info.keypair }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ node_output.instances.0.public_ip_address }}" 
        port: 22
        state: present

